{"version":3,"sources":["skylark-graphics-brushes.js"],"names":["define","skylark","attach","numerics","Vector2","x","y","this","Object","defineProperties","prototype","width","get","set","value","height","assign","setScalar","scalar","setX","setY","clone","constructor","copy","v","add","w","undefined","console","warn","addVectors","addScalar","s","a","b","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","m","e","elements","min","Math","max","clamp","clampScalar","minVal","maxVal","clampLength","length","floor","ceil","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","PI","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","lerp","alpha","lerpVectors","v1","v2","equals","fromArray","array","offset","toArray","rotateAround","center","c","cos","sin","objects","klass","DEG_TO_RAD","_degToRadCache","degToRad","degree","Matrix","klassName","_multiplyPoint","p","_","m11","m21","m12","m22","shadow","compositeOperation","multiplyPoint","multiplyRectangle","rect","isIdentity","p0","leftTop","p1","leftBottom","p2","right","p3","rightBottom","minx","miny","maxx","maxy","Rect","prepend","tx1","a1","c1","append","b1","d1","prependMatrix","matrix","prependProperties","appendMatrix","appendProperties","prependTransform","scaleX","scaleY","rotation","skewX","skewY","regX","regY","r","appendTransform","rotate","skew","scale","translate","identity","invert","n","decompose","target","reinitialize","_initialize","mtx","toString","init","mixin","rotateg","tan","skewXg","skewYg","reflect","arguments","a2","b2","n2","xx","xy","yx","yy","project","_sandwich","scaleAt","d","rotateAt","rotategAt","skewXAt","skewXgAt","skewYAt","skewYgAt","langx","Transform","brushes","Brush","opacity","transform","Color","GradientBrush","inherit","TileBrush","ImageBrush","imageSource","_construct","url","fromString","CssUtils","parseBackgroundImage","type","RadialGradientBrush","startPoint","webKitPosn1","endPoint","webKitPosn2","startRadius","webKitRadius1","endRadius","webKitRadius2","fromColor","stops","color","toColor","slice","map","item","pos","SolidColorBrush","parse","TileRepeateMode","repeat","repeatx","repeaty","norepeat","fromCss","toCss","main"],"mappings":"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","file":"../skylark-graphics-brushes.js","sourcesContent":["define('skylark-graphics-brushes/brushes',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"graphics.burshes\",{});\r\n});\r\n\r\n\ndefine('skylark-langx-numerics/Vector2',[\r\n\t\"./numerics\"\r\n] ,function(numerics) {\r\n\r\n\r\n\tfunction Vector2( x, y ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( Vector2.prototype, {\r\n\r\n\t\t\"width\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.x = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t\"height\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.y = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector2.prototype, {\r\n\r\n\t\tset: function ( x, y ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v ) {\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tangle: function () {\r\n\r\n\t\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\t\tvar angle = Math.atan2( - this.y, - this.x ) + Math.PI;\r\n\r\n\t\t\treturn angle;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\t\treturn dx * dx + dy * dy;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\r\n\t\trotateAround: function ( center, angle ) {\r\n\r\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\t\tvar x = this.x - center.x;\r\n\t\t\tvar y = this.y - center.y;\r\n\r\n\t\t\tthis.x = x * c - y * s + center.x;\r\n\t\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\r\n\treturn numerics.Vector2 = Vector2 ;\r\n});\r\n\ndefine( 'skylark-langx-numerics/Matrix',[\r\n    \"skylark-langx-objects\",\r\n    \"skylark-langx-klass\",\r\n    \"./numerics\",\r\n    \"./Vector2\"\r\n], function(objects,klass,numerics,Vector2){\r\n\t// reference easeljs/numerics/Matrix2D  and dojox/gfx/matrix\r\n\t\r\n\tvar DEG_TO_RAD = Math.PI/180;\r\n\tvar _degToRadCache = {};\r\n\tvar degToRad = function(degree){\r\n\t\treturn _degToRadCache[degree] || (_degToRadCache[degree] = (Math.PI * degree / 180));\r\n\t};\r\n\tvar radToDeg = function(radian){ return radian / Math.PI * 180; };\r\n\t\r\n\r\n\t//Represents a 3 x 3 affine transformation matrix used for transformation in 2-D space.\r\n\t//|----------|\r\n\t//|m11|m21|dx| \r\n\t//|----------|\r\n\t//|m12|m22|dy|\r\n\t//|----------|\r\n\t//|  0|  0| 1|\r\n\t//|----------|\r\n\t\r\n    var Matrix = numerics.Matrix = klass({\r\n        \"klassName\": \"TransformMatrix\",\r\n\r\n\t\t\"_multiplyPoint\"\t: \tfunction(p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\t// p: Point\r\n\t\t\t//\t\ta point\r\n\t\t\t// returns: Point\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tx = p.x * _.m11 + p.y * _.m21  + _.dx,\r\n\t\t\t    y = p.x * _.m12 +  p.y * _.m22 + _.dy;\r\n\r\n\t\t\treturn new Vector2(x,y); // Point\r\n\t\t},\r\n\r\n       \"m11\": {\r\n       \t\t//Position (0, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m11;\r\n            }\r\n        },\r\n\r\n       \"m12\": {\r\n       \t\t//Position (0, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m12;\r\n            }\r\n        },\r\n\r\n       \"m21\": {\r\n       \t\t//Position (1, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m21;\r\n            }\r\n        },\r\n\r\n       \"m22\": {\r\n       \t\t//Position (1, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m22;\r\n            }\r\n        },\r\n\r\n       \"dx\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dx;\r\n            }\r\n        },\r\n\r\n       \"dy\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dy;\r\n            }\r\n        },\r\n\r\n       \"alpha\": {\r\n       \t\t// Property representing the alpha that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.\r\n            get : function() {\r\n                return this._.alpha;\r\n            }\r\n        },\r\n\r\n       \"shadow\": {\r\n       \t\t// Property representing the shadow that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values..\r\n            get : function() {\r\n                return this._.shadow;\r\n            }\r\n        },\r\n\r\n       \"compositeOperation\": {\r\n\t\t\t/**\r\n\t\t\t * Property representing the compositeOperation that will be applied to a display object. This is not part of\r\n\t\t\t * matrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated\r\n\t\t\t * compositeOperation values. You can find a list of valid composite operations at:\r\n\t\t\t * <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>\r\n\t\t\t * @property compositeOperation\r\n\t\t\t * @type String\r\n\t\t\t **/\r\n            get : function() {\r\n                return this._.compositeOperation;\r\n            }\r\n        },\r\n\r\n        //Converts the specified point with Matrix and returns the result.\r\n\t\tmultiplyPoint: /*Vector2*/function(/*Vector2 */ p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\treturn this._multiplyPoint(p); // Vector2\r\n\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * 指定した矩形を Matrix で変換し、その結果を返します。\r\n\t\t\t\t */\r\n\t\tmultiplyRectangle: /*Rect*/function(/*Rect*/ rect){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tApplies the matrix to a rectangle.\r\n\t\t\t// returns: Rect\r\n\t\t\tif(this.isIdentity())\r\n\t\t\t\treturn rect.clone(); // Rect\r\n\t\t\tvar p0 = this.multiplyPoint(rect.leftTop),\r\n\t\t\t\tp1 = this.multiplyPoint(rect.leftBottom),\r\n\t\t\t\tp2 = this.multiplyPoint(rect.right),\r\n\t\t\t\tp3 = this.multiplyPoint(rect.rightBottom),\r\n\t\t\t\tminx = Math.min(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tminy = Math.min(p0.y, p1.y, p2.y, p3.y),\r\n\t\t\t\tmaxx = Math.max(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tmaxy = Math.max(p0.y, p1.y, p2.y, p3.y);\r\n\t\t\treturn new Rect(minx,miny,maxx-minx,maxy-miny);  // Rect\r\n\t\t},\r\n\t\t/**\r\n\t\t * Concatenates the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * @method prepend\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprepend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tif (m11 != 1 || m12 != 0 || m21 != 0 || m22 != 1) {\r\n\t\t\t\tvar a1 = this.m11;\r\n\t\t\t\tvar c1 = this.m21;\r\n\t\t\t\tthis.m11  = a1*m11+this.m12*m21;\r\n\t\t\t\tthis.m12  = a1*m12+this.m12*m22;\r\n\t\t\t\tthis.m21  = c1*m11+this.m22*m21;\r\n\t\t\t\tthis.m22  = c1*m12+this.m22*m22;\r\n\t\t\t}\r\n\t\t\tthis.dx = tx1*m11+this.dy*m21+dx;\r\n\t\t\tthis.dy = tx1*m12+this.dy*m22+dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method append\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\r\n\t\t\tthis.m11  = m11*a1+m12*c1;\r\n\t\t\tthis.m12  = m11*b1+m12*d1;\r\n\t\t\tthis.m21  = m21*a1+m22*c1;\r\n\t\t\tthis.m22  = m21*b1+m22*d1;\r\n\t\t\tthis.dx = dx*a1+dy*c1+this.dx;\r\n\t\t\tthis.dy = dx*b1+dy*d1+this.dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified matrix with this matrix.\r\n\t\t * @method prependMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t **/\r\n\t\tprependMatrix : function(matrix) {\r\n\t\t\tthis.prepend(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.prependProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix with this matrix.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method appendMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendMatrix : function(matrix) {\r\n\t\t\tthis.append(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.appendProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method prependTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprependTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// append the registration offset:\r\n\t\t\t\tthis.dx -= regX; this.dy -= regY;\r\n\t\t\t}\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single prepend operation?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t\tthis.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t} else {\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and appends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method appendTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single append?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// prepend the registration offset:\r\n\t\t\t\tthis.dx -= regX*this.m11+regY*this.m21; \r\n\t\t\t\tthis.dy -= regX*this.m12+regY*this.m22;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a rotation transformation to the matrix.\r\n\t\t * この Matrix の原点を中心とする指定した角度の回転を適用します。\r\n\t\t * @method rotate\r\n\t\t * @param {Number} angle The angle in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\trotate : function(angle) {\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar tx1 = this.dx;\r\n\r\n\t\t\tthis.m11 = a1*cos-this.m12*sin;\r\n\t\t\tthis.m12 = a1*sin+this.m12*cos;\r\n\t\t\tthis.m21 = c1*cos-this.m22*sin;\r\n\t\t\tthis.m22 = c1*sin+this.m22*cos;\r\n\t\t\tthis.dx = tx1*cos-this.dy*sin;\r\n\t\t\tthis.dy = tx1*sin+this.dy*cos;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a skew transformation to the matrix.\r\n\t\t * @method skew\r\n\t\t * @param {Number} skewX The amount to skew horizontally in degrees.\r\n\t\t * @param {Number} skewY The amount to skew vertically in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tskew : function(skewX, skewY) {\r\n\t\t\tskewX = skewX*DEG_TO_RAD;\r\n\t\t\tskewY = skewY*DEG_TO_RAD;\r\n\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a scale transformation to the matrix.\r\n\t\t * @method scale\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tscale : function(x, y) {\r\n\t\t\tthis.m11 *= x;\r\n\t\t\tthis.m22 *= y;\r\n\t\t\tthis.dx *= x;\r\n\t\t\tthis.dy *= y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Translates the matrix on the x and y axes.\r\n\t\t * @method translate\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\ttranslate : function(x, y) {\r\n\t\t\tthis.dx += x;\r\n\t\t\tthis.dy += y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\r\n\t\t * @method identity\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tidentity : function() {\r\n\t\t\tthis.alpha = this.m11 = this.m22 = 1;\r\n\t\t\tthis.m12 = this.m21 = this.dx = this.dy = 0;\r\n\t\t\tthis.shadow = this.compositeOperation = null;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Inverts the matrix, causing it to perform the opposite transformation.\r\n\t\t * @method invert\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tinvert : function() {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tvar n = a1*d1-b1*c1;\r\n\r\n\t\t\tthis.m11 = d1/n;\r\n\t\t\tthis.m12 = -b1/n;\r\n\t\t\tthis.m21 = -c1/n;\r\n\t\t\tthis.m22 = a1/n;\r\n\t\t\tthis.dx = (c1*this.dy-d1*tx1)/n;\r\n\t\t\tthis.dy = -(a1*this.dy-b1*tx1)/n;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns true if the matrix is an identity matrix.\r\n\t\t * @method isIdentity\r\n\t\t * @return {Boolean}\r\n\t\t **/\r\n\t\tisIdentity : function() {\r\n\t\t\treturn this.dx == 0 && this.dy == 0 && this.m11 == 1 && this.m12 == 0 && this.m21 == 0 && this.m22 == 1;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that this these values\r\n\t\t * may not match the transform properties you used to generate the matrix, though they will produce the same visual\r\n\t\t * results.\r\n\t\t * @method decompose\r\n\t\t * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tdecompose : function(target) {\r\n\t\t\t// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation\r\n\t\t\t// even when scale is negative\r\n\t\t\tif (target == null) { target = {}; }\r\n\t\t\ttarget.x = this.dx;\r\n\t\t\ttarget.y = this.dy;\r\n\t\t\ttarget.scaleX = Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12);\r\n\t\t\ttarget.scaleY = Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22);\r\n\r\n\t\t\tvar skewX = Math.atan2(-this.m21, this.m22);\r\n\t\t\tvar skewY = Math.atan2(this.m12, this.m11);\r\n\r\n\t\t\tif (skewX == skewY) {\r\n\t\t\t\ttarget.rotation = skewY/DEG_TO_RAD;\r\n\t\t\t\tif (this.m11 < 0 && this.m22 >= 0) {\r\n\t\t\t\t\ttarget.rotation += (target.rotation <= 0) ? 180 : -180;\r\n\t\t\t\t}\r\n\t\t\t\ttarget.skewX = target.skewY = 0;\r\n\t\t\t} else {\r\n\t\t\t\ttarget.skewX = skewX/DEG_TO_RAD;\r\n\t\t\t\ttarget.skewY = skewY/DEG_TO_RAD;\r\n\t\t\t}\r\n\t\t\treturn target;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reinitializes all matrix properties to those specified.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\treinitialize : function(m11,m12,m21,m22,dx,dy,alpha,shadow,compositeOperation) {\r\n\t\t\tthis._initialize(m11,m12,m21,m22,dx,dy);\r\n\t\t\tthis.alpha = alpha || 1;\r\n\t\t\tthis.shadow = shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified visual properties to the current matrix.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tappendProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = shadow || this.shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation || this.compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified visual properties to the current matrix.\r\n\t\t * @method prependProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tprependProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = this.shadow || shadow;\r\n\t\t\tthis.compositeOperation = this.compositeOperation || compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t *Multiply Matrix by another Matrix.\r\n\t\t */\r\n\t\tmultiply: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcombines matrices by multiplying them sequentially in the given order\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object,\r\n\t\t\t//\t\tall subsequent arguments are matrix-like objects too\r\n\r\n\t\t\t// combine matrices\r\n\t\t\tvar m11 = this.m11,m12 = this.m12,m21 = this.m21,m22=this.m22,dx=this.dx,dy=this.dy;\r\n\t\t\tvar r = matrix;\r\n\t\t\tthis.m11 = m11 * r.m11 + m21 * r.m12;\r\n\t\t\tthis.m12 = m12 * r.m11 + m22 * r.m12;\r\n\t\t\tthis.m21 = m11 * r.m21 + m21 * r.m22;\r\n\t\t\tthis.m22 = m12 * r.m21 + m22 * r.m22;\r\n\t\t\tthis.dx =  m11 * r.dx + m21 * r.dy + dx;\r\n\t\t\tthis.dy =  m12 * r.dx + m22 * r.dy + dy;\r\n\t\t\treturn this // Matrix\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a clone of the Matrix instance.\r\n\t\t * @method clone\r\n\t\t * @return {Matrix} a clone of the Matrix instance.\r\n\t\t **/\r\n\t\tclone : function() {\r\n\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tmtx = new Matrix(_.m11, _.m12, _.m21, _.m22, _.dx, _.dy);\r\n\t\t\tmtx.shadow = this.shadow;\r\n\t\t\tmtx.alpha = this.alpha;\r\n\t\t\tmtx.compositeOperation = this.compositeOperation;\r\n\t\t\treturn mtx;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a string representation of this object.\r\n\t\t * @method toString\r\n\t\t * @return {String} a string representation of the instance.\r\n\t\t **/\r\n\t\ttoString : function() {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn \"[Matrix (m11=\"+_.m11+\" m12=\"+_.m12+\" m21=\"+_.m21+\" m22=\"+_.m22+\" dx=\"+_.dx+\" dy=\"+_.dy+\")]\";\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\t_.m11 = m11 || 1;\r\n\t\t\t_.m12 = m12 || 0;\r\n\t\t\t_.m21 = m21 || 0;\r\n\t\t\t_.m22 = m22 || 1;\r\n\t\t\t_.dx = dx || 0;\r\n\t\t\t_.dy = dy || 0;\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\tobjects.mixin(Matrix,{\r\n\t\ttranslate: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a translation matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to translate (move) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| a|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| b|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\r\n\t\t\treturn new Matrix(1,0,0,1,a,b); // Matrix\r\n\t\t},\r\n\t\tscale: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a scaling matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to scale (magnify) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  a|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   b| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\treturn new Matrix(a,0,0,b?b:a,0,0); // Matrix\r\n\t\t},\r\n\t\trotate: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |cos|-sin| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |sin| cos| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\t\t\treturn new Matrix(cos,sin,-sin,cos,0,0); // Matrix\r\n\t\t},\r\n\t\trotateg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSeerotate() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.rotate(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\tskewX: function(angle) {\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1| tan| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\t\t\treturn new Matrix(1,0,tan,1); // Matrix\r\n\t\t},\r\n\t\tskewXg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox/gfx/matrix.skewX() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewX(degToRad(degree)); // dojox/gfx/matrix.Matrix\r\n\t\t},\r\n\t\tskewY: function(angle){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |tan|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\r\n\t\t\treturn new Matrix(1,tan,0,1); // Matrix\r\n\t\t},\r\n\t\tskewYg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee skewY() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewY(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\treflect: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a reflection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to reflect points around a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a: dojox/gfx.Point|Number\r\n\t\t\t//\t\ta point-like object, which specifies a vector of reflection, or an X value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta Y value\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length == 1){\r\n\t\t\t\tb = a.y;\r\n\t\t\t\ta = a.x;\r\n\t\t\t}\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx=2 * a2 / n2 - 1, \r\n\t\t\t\txy = 2 * a * b / n2,\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = 2 * b2 / n2 - 1;\r\n\t\t\treturn new Matrix(xx,yx,xy, yy); // Matrix\r\n\t\t},\r\n\t\tproject: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an orthogonal projection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to project points orthogonally on a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a:   Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx = a2 / n2,\r\n\t\t\t\txy = a * b / n2\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = b2 / n2;\r\n\t\t\treturn new Matrix(xx,yx,xy,yy); // Matrix\r\n\t\t},\r\n\r\n\t\t// common operations\r\n\r\n\t\t// high level operations\r\n\r\n\t\t_sandwich: function(matrix, x, y){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix at a central point\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object, which is applied at a central point\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tan x component of the central point\r\n\t\t\t// y: Number\r\n\t\t\t//\t\ta y component of the central point\r\n\t\t\treturn this.translate(x, y).multiply(matrix)\r\n\t\t\t                           .multiply(this.translate(-x, -y)); // Matrix\r\n\t\t},\r\n\t\tscaleAt: function(a, b, c, d){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tscales a picture using a specified point as a center of scaling\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with scale().\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate, or a uniform scaling factor used for both coordinates\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// c: Number|Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// d: Number\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tswitch(arguments.length){\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t// a and b are scale factor components, c and d are components of a point\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c, d); // Matrix\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif(typeof c == \"number\"){\r\n\t\t\t\t\t\treturn this._sandwich(this.scale(a), b, c); // Matrix\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c.x, c.y); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.scale(a), b.x, b.y); // Matrix\r\n\t\t},\r\n\t\trotateAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotate().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotate(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotate(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\trotategAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotateg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotateg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotateg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewX().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewX(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewX(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXgAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewXg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewXg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewXg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewY().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewY(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewY(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYgAt: function(/* Number */ degree, /* Number||Point */ a, /* Number? */ b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewYg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewYg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewYg(degree), a.x, a.y); // Matrix\r\n\t\t}\r\n\t\r\n\t\r\n\t});\r\n\r\n\treturn Matrix;\r\n});\r\n\ndefine('skylark-langx-numerics/Transform',[\r\n    \"skylark-langx/langx\",\r\n    \"./numerics\",\r\n\t\"./Matrix\"\r\n], function(langx,numerics, Matrix) {\r\n\r\n    var Transform = numerics.Transform = langx.klass({\r\n        \"klassName\": \"Transform\",\r\n\t\t\"value\": {\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this._.value;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn Transform;\r\n});\r\n\ndefine('skylark-graphics-brushes/Brush',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-langx-numerics/Transform\",\r\n\t\"./brushes\"\r\n], function(langx, Transform,brushes) {\r\n\tvar Brush = langx.klass({\r\n\t\t\"klassName\": \"Brush\",\r\n\r\n\t\t\"opacity\": {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.opacity;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"transform\": {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.transform;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn brushes.Brush = Brush;\r\n});\r\n\ndefine('skylark-graphics-brushes/GradientBrush',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-graphics-color\",\r\n\t\"./brushes\",\r\n\t\"./Brush\"\r\n],function(langx,Color,brushes,Brush) {\r\n\r\n\tvar GradientBrush = Brush.inherit({\r\n\r\n\t\t\"klassName\"\t:\t\"GradientBrush\",\r\n\r\n\t\t\r\n\t});\r\n\r\n\treturn brushes.GradientBrush = GradientBrush;\r\n\t\r\n});\t\r\n\r\n\ndefine('skylark-graphics-brushes/TileBrush',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./brushes\",\r\n\t\"./Brush\"\r\n],function(langx,brushes,Brush) {\r\n\r\n\tvar TileBrush = Brush.inherit({\r\n\t\t\"klassName\"\t:\t\"TileBrush\",\r\n\r\n\t});\r\n\r\n\treturn brushes.TileBrush = TileBrush;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-brushes/ImageBrush',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-graphics-color\",\r\n\t\"./brushes\",\r\n\t\"./TileBrush\"\r\n],function(langx,Color,brushes,TileBrush) {\r\n\r\n\tvar ImageBrush = TileBrush.inherit({\r\n\r\n\t\t\"klassName\"\t:\t\"qface/style/ImageBrush\",\r\n\r\n\t\t\"imageSource\"\t:\t{\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.imageSource;\r\n\t\t\t}\t\t\r\n\t\t},\r\n\r\n\t\t\"toString\" : function() {\r\n\t\t\treturn \"url(\"+this.imageSource+\")\";\r\n\t\t},\r\n\t\t\r\n\t\t\"_construct\" : function(url){\r\n\t\t\tthis._ = {\r\n\t\t\t\timageSource : url\r\n\t\t\t};\r\n\t\t}\t\r\n\t});\r\n\r\n\tImageBrush.fromString = function(s) {\r\n\t\tvar p = CssUtils.parseBackgroundImage(s);\r\n\t\tif (p.type == \"url\") {\r\n\t\t\treturn new ImageBrush(p.url);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\treturn brushes.ImageBrush = ImageBrush;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-brushes/RadialGradientBrush',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-graphics-color\",\r\n\t\"./brushes\",\r\n\t\"./GradientBrush\"\r\n],function(langx,Color,brushes,GradientBrush) {\r\n\t\r\n\tvar RadialGradientBrush = GradientBrush.inherit({\r\n\t\t\"klassName\"\t:\t\"RadialGradientBrush\",\r\n\r\n\t});\r\n\r\n\tRadialGradientBrush.fromString = function(s) {\r\n\t\tvar p = CssUtils.parseBackgroundImage(s);\r\n\t\tif (p.type == \"radial\" ) {\r\n\t\t\treturn new RadialGradientBrush({\r\n\t\t\t\tstartPoint : p.webKitPosn1,\r\n\t\t\t\tendPoint   : p.webKitPosn2,\r\n\t\t\t\tstartRadius: p.webKitRadius1,\r\n\t\t\t\tendRadius  : p.webKitRadius2,\r\n\t\t\t\tfromColor  : p.stops[0].color,\r\n\t\t\t\ttoColor    : p.stops[p.stops.length-1].color,\r\n\r\n\t\t\t\tstops      : p.stops.slice(1,p.stops.length-1).map(function(item){\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toffset : item.pos,\r\n\t\t\t\t\t\tcolor : item.color\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\treturn brushes.RadialGradientBrush = RadialGradientBrush;\r\n\t\r\n});\t\r\n\r\n\ndefine('skylark-graphics-brushes/SolidColorBrush',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-graphics-color\",\r\n\t\"./brushes\",\r\n\t\"./Brush\"\r\n],function(langx,Color,brushes,Brush) {\r\n\r\n\tvar SolidColorBrush = Brush.inherit({\r\n\t\t\r\n\t\t\"klassName\"\t:\t\"SolidColorBrush\",\r\n\r\n\t\t\"color\" : {\r\n\t\t\tget  : function() {\r\n\t\t\t\treturn this._.color;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"toString\" : function() {\r\n\t\t\treturn this.color.toString();\r\n\t\t},\r\n\t\r\n\t\t\"_construct\" : function(c){\r\n\t\t\tthis._ = {\r\n\t\t\t\tcolor : c\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\tSolidColorBrush.fromString = function(s) {\r\n\t\tvar c = Color.parse(s);\r\n\t\tif (c) {\r\n\t\t\treturn new SolidColorBrush(c);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\treturn brushes.SolidColorBrush = SolidColorBrush;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-brushes/TileRepeateMode',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./brushes\"\r\n], function(langx, brushes) {\r\n\r\n\tvar TileRepeateMode = [\"repeat\", \"repeatx\", \"repeaty\", \"norepeat\"];\r\n\r\n\tlangx.mixin(TileRepeateMode,{\r\n\t\t\"repeat\" : 0, \r\n\t\t\"repeatx\" : 1, \r\n\t\t\"repeaty\" : 2, \r\n\t\t\"norepeat\" : 3\r\n\t});\r\n\r\n\tTileRepeateMode.fromCss = function(s) {\r\n\t\tswitch (s) {\r\n\t\t\tcase \"repeat\" : \r\n\t\t\t\treturn TileRepeateMode.repeat;\r\n\t\t\tcase \"repeat-x\" : \r\n\t\t\t\treturn TileRepeateMode.repeatx;\r\n\t\t\tcase \"repeat-y\" : \r\n\t\t\t\treturn TileRepeateMode.repeaty;\r\n\t\t\tcase \"no-repeat\" : \r\n\t\t\t\treturn TileRepeateMode.norepeat;\r\n\t\t\tdefault :\r\n\t\t\t\treturn undefined;\t\t\t\r\n\t\t}\r\n\t};\r\n\tTileRepeateMode.toCss = function(repeat) {\r\n\t\tswitch (repeat) {\r\n\t\t\tcase TileRepeateMode.repeat : \r\n\t\t\t\treturn \"repeat\";\r\n\t\t\tcase TileRepeateMode.repeatx : \r\n\t\t\t\treturn \"repeat-x\";\r\n\t\t\tcase TileRepeateMode.repeaty : \r\n\t\t\t\treturn \"repeat-y\";\r\n\t\t\tcase TileRepeateMode.norepeat : \r\n\t\t\t\treturn \"no-repeat\";\r\n\t\t\tdefault :\r\n\t\t\t\treturn undefined;\t\t\t\r\n\t\t}\r\n\t};\r\n\r\n\treturn brushes.TileRepeateMode = TileRepeateMode;\r\n\r\n});\r\n\ndefine('skylark-graphics-brushes/main',[\r\n\t\"./brushes\",\r\n\t\"./Brush\",\r\n\t\"./GradientBrush\",\r\n\t\"./ImageBrush\",\r\n\t\"./RadialGradientBrush\",\r\n\t\"./SolidColorBrush\",\r\n\t\"./TileBrush\",\r\n\t\"./TileRepeateMode\"\r\n],function(brushes){\r\n\treturn brushes;\r\n});\r\n\r\n\ndefine('skylark-graphics-brushes', ['skylark-graphics-brushes/main'], function (main) { return main; });\n\n"]}